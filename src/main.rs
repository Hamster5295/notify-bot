#![recursion_limit = "10240"]

mod config;
mod service;

use std::{
    collections::HashMap,
    fs::{self},
    io::Result,
    path::Path,
    time::Duration,
};

use actix_web::{web::Data, App, HttpServer};
use clap::{command, Parser};
use config::{Config, LogConfig, RuntimeConfig};
use reqwest::Client;
use service::notify;
use tklog::{info, warn, Format, LEVEL, LOG};

use shadow_rs::shadow;

shadow!(build);

#[derive(Parser)]
#[command(version, about)]
/// A simple notification server for QQBot.
struct Args {
    /// The config file path.
    #[arg(short, long)]
    config: Option<String>,
}

#[actix_web::main]
async fn main() -> Result<()> {
        println!(
            "{}",
            r"[38;2;99;35;249m [39m[38;2;95;37;250m [39m[38;2;91;41;251m [39m[38;2;87;44;252m [39m[38;2;83;47;253m_[39m[38;2;79;50;253m [39m[38;2;75;54;254m [39m[38;2;71;57;254m [39m[38;2;67;61;254m_[39m[38;2;64;64;254m_[39m[38;2;60;68;254m [39m[38;2;57;72;254m [39m[38;2;53;76;254m [39m[38;2;50;79;253m [39m[38;2;46;83;253m [39m[38;2;43;87;252m [39m[38;2;40;91;251m_[39m[38;2;37;96;250m_[39m[38;2;34;100;249m [39m[38;2;31;104;247m [39m[38;2;29;108;246m_[39m[38;2;26;112;244m [39m[38;2;23;116;243m_[39m[38;2;21;121;241m_[39m[38;2;19;125;239m_[39m[38;2;17;129;237m_[39m[38;2;15;133;234m [39m[38;2;13;138;232m [39m[38;2;11;142;230m [39m[38;2;9;146;227m [39m[38;2;8;150;224m [39m[38;2;7;154;222m [39m[38;2;5;158;219m [39m[38;2;4;162;216m [39m[38;2;3;167;213m [39m[38;2;3;171;209m [39m[38;2;2;174;206m [39m[38;2;1;178;203m [39m[38;2;1;182;199m_[39m[38;2;1;186;196m_[39m[38;2;1;190;192m_[39m[38;2;1;193;189m_[39m[38;2;1;197;185m [39m[38;2;1;200;181m [39m[38;2;1;204;177m [39m[38;2;2;207;173m [39m[38;2;3;211;169m [39m[38;2;4;214;165m [39m[38;2;5;217;161m [39m[38;2;6;220;157m [39m[38;2;7;223;153m_[39m[38;2;8;225;149m_[39m[38;2;10;228;145m [39m
[39m[38;2;95;37;250m [39m[38;2;91;41;251m [39m[38;2;87;44;252m [39m[38;2;83;47;253m/[39m[38;2;79;50;253m [39m[38;2;75;54;254m|[39m[38;2;71;57;254m [39m[38;2;67;61;254m/[39m[38;2;64;64;254m [39m[38;2;60;68;254m/[39m[38;2;57;72;254m_[39m[38;2;53;76;254m_[39m[38;2;50;79;253m_[39m[38;2;46;83;253m [39m[38;2;43;87;252m [39m[38;2;40;91;251m/[39m[38;2;37;96;250m [39m[38;2;34;100;249m/[39m[38;2;31;104;247m_[39m[38;2;29;108;246m([39m[38;2;26;112;244m_[39m[38;2;23;116;243m)[39m[38;2;21;121;241m [39m[38;2;19;125;239m_[39m[38;2;17;129;237m_[39m[38;2;15;133;234m/[39m[38;2;13;138;232m_[39m[38;2;11;142;230m [39m[38;2;9;146;227m [39m[38;2;8;150;224m_[39m[38;2;7;154;222m_[39m[38;2;5;158;219m [39m[38;2;4;162;216m [39m[38;2;3;167;213m [39m[38;2;3;171;209m [39m[38;2;2;174;206m [39m[38;2;1;178;203m [39m[38;2;1;182;199m/[39m[38;2;1;186;196m [39m[38;2;1;190;192m_[39m[38;2;1;193;189m_[39m[38;2;1;197;185m [39m[38;2;1;200;181m)[39m[38;2;1;204;177m_[39m[38;2;2;207;173m_[39m[38;2;3;211;169m_[39m[38;2;4;214;165m_[39m[38;2;5;217;161m [39m[38;2;6;220;157m [39m[38;2;7;223;153m/[39m[38;2;8;225;149m [39m[38;2;10;228;145m/[39m[38;2;12;230;140m_[39m
[39m[38;2;91;41;251m [39m[38;2;87;44;252m [39m[38;2;83;47;253m/[39m[38;2;79;50;253m [39m[38;2;75;54;254m [39m[38;2;71;57;254m|[39m[38;2;67;61;254m/[39m[38;2;64;64;254m [39m[38;2;60;68;254m/[39m[38;2;57;72;254m [39m[38;2;53;76;254m_[39m[38;2;50;79;253m_[39m[38;2;46;83;253m [39m[38;2;43;87;252m\[39m[38;2;40;91;251m/[39m[38;2;37;96;250m [39m[38;2;34;100;249m_[39m[38;2;31;104;247m_[39m[38;2;29;108;246m/[39m[38;2;26;112;244m [39m[38;2;23;116;243m/[39m[38;2;21;121;241m [39m[38;2;19;125;239m/[39m[38;2;17;129;237m_[39m[38;2;15;133;234m/[39m[38;2;13;138;232m [39m[38;2;11;142;230m/[39m[38;2;9;146;227m [39m[38;2;8;150;224m/[39m[38;2;7;154;222m [39m[38;2;5;158;219m/[39m[38;2;4;162;216m_[39m[38;2;3;167;213m_[39m[38;2;3;171;209m_[39m[38;2;2;174;206m_[39m[38;2;1;178;203m_[39m[38;2;1;182;199m/[39m[38;2;1;186;196m [39m[38;2;1;190;192m_[39m[38;2;1;193;189m_[39m[38;2;1;197;185m [39m[38;2;1;200;181m [39m[38;2;1;204;177m/[39m[38;2;2;207;173m [39m[38;2;3;211;169m_[39m[38;2;4;214;165m_[39m[38;2;5;217;161m [39m[38;2;6;220;157m\[39m[38;2;7;223;153m/[39m[38;2;8;225;149m [39m[38;2;10;228;145m_[39m[38;2;12;230;140m_[39m[38;2;13;233;136m/[39m
[39m[38;2;87;44;252m [39m[38;2;83;47;253m/[39m[38;2;79;50;253m [39m[38;2;75;54;254m/[39m[38;2;71;57;254m|[39m[38;2;67;61;254m [39m[38;2;64;64;254m [39m[38;2;60;68;254m/[39m[38;2;57;72;254m [39m[38;2;53;76;254m/[39m[38;2;50;79;253m_[39m[38;2;46;83;253m/[39m[38;2;43;87;252m [39m[38;2;40;91;251m/[39m[38;2;37;96;250m [39m[38;2;34;100;249m/[39m[38;2;31;104;247m_[39m[38;2;29;108;246m/[39m[38;2;26;112;244m [39m[38;2;23;116;243m/[39m[38;2;21;121;241m [39m[38;2;19;125;239m_[39m[38;2;17;129;237m_[39m[38;2;15;133;234m/[39m[38;2;13;138;232m [39m[38;2;11;142;230m/[39m[38;2;9;146;227m_[39m[38;2;8;150;224m/[39m[38;2;7;154;222m [39m[38;2;5;158;219m/[39m[38;2;4;162;216m_[39m[38;2;3;167;213m_[39m[38;2;3;171;209m_[39m[38;2;2;174;206m_[39m[38;2;1;178;203m_[39m[38;2;1;182;199m/[39m[38;2;1;186;196m [39m[38;2;1;190;192m/[39m[38;2;1;193;189m_[39m[38;2;1;197;185m/[39m[38;2;1;200;181m [39m[38;2;1;204;177m/[39m[38;2;2;207;173m [39m[38;2;3;211;169m/[39m[38;2;4;214;165m_[39m[38;2;5;217;161m/[39m[38;2;6;220;157m [39m[38;2;7;223;153m/[39m[38;2;8;225;149m [39m[38;2;10;228;145m/[39m[38;2;12;230;140m_[39m[38;2;13;233;136m [39m[38;2;15;235;132m [39m
[39m[38;2;83;47;253m/[39m[38;2;79;50;253m_[39m[38;2;75;54;254m/[39m[38;2;71;57;254m [39m[38;2;67;61;254m|[39m[38;2;64;64;254m_[39m[38;2;60;68;254m/[39m[38;2;57;72;254m\[39m[38;2;53;76;254m_[39m[38;2;50;79;253m_[39m[38;2;46;83;253m_[39m[38;2;43;87;252m_[39m[38;2;40;91;251m/[39m[38;2;37;96;250m\[39m[38;2;34;100;249m_[39m[38;2;31;104;247m_[39m[38;2;29;108;246m/[39m[38;2;26;112;244m_[39m[38;2;23;116;243m/[39m[38;2;21;121;241m_[39m[38;2;19;125;239m/[39m[38;2;17;129;237m [39m[38;2;15;133;234m [39m[38;2;13;138;232m\[39m[38;2;11;142;230m_[39m[38;2;9;146;227m_[39m[38;2;8;150;224m,[39m[38;2;7;154;222m [39m[38;2;5;158;219m/[39m[38;2;4;162;216m [39m[38;2;3;167;213m [39m[38;2;3;171;209m [39m[38;2;2;174;206m [39m[38;2;1;178;203m [39m[38;2;1;182;199m/[39m[38;2;1;186;196m_[39m[38;2;1;190;192m_[39m[38;2;1;193;189m_[39m[38;2;1;197;185m_[39m[38;2;1;200;181m_[39m[38;2;1;204;177m/[39m[38;2;2;207;173m\[39m[38;2;3;211;169m_[39m[38;2;4;214;165m_[39m[38;2;5;217;161m_[39m[38;2;6;220;157m_[39m[38;2;7;223;153m/[39m[38;2;8;225;149m\[39m[38;2;10;228;145m_[39m[38;2;12;230;140m_[39m[38;2;13;233;136m/[39m[38;2;15;235;132m [39m[38;2;17;237;128m [39m
[39m[38;2;79;50;253m [39m[38;2;75;54;254m [39m[38;2;71;57;254m [39m[38;2;67;61;254m [39m[38;2;64;64;254m [39m[38;2;60;68;254m [39m[38;2;57;72;254m [39m[38;2;53;76;254m [39m[38;2;50;79;253m [39m[38;2;46;83;253m [39m[38;2;43;87;252m [39m[38;2;40;91;251m [39m[38;2;37;96;250m [39m[38;2;34;100;249m [39m[38;2;31;104;247m [39m[38;2;29;108;246m [39m[38;2;26;112;244m [39m[38;2;23;116;243m [39m[38;2;21;121;241m [39m[38;2;19;125;239m [39m[38;2;17;129;237m [39m[38;2;15;133;234m [39m[38;2;13;138;232m/[39m[38;2;11;142;230m_[39m[38;2;9;146;227m_[39m[38;2;8;150;224m_[39m[38;2;7;154;222m_[39m[38;2;5;158;219m/[39m[38;2;4;162;216m [39m[38;2;3;167;213m [39m[38;2;3;171;209m [39m[38;2;2;174;206m [39m[38;2;1;178;203m [39m[38;2;1;182;199m [39m[38;2;1;186;196m [39m[38;2;1;190;192m [39m[38;2;1;193;189m [39m[38;2;1;197;185m [39m[38;2;1;200;181m [39m[38;2;1;204;177m [39m[38;2;2;207;173m [39m[38;2;3;211;169m [39m[38;2;4;214;165m [39m[38;2;5;217;161m [39m[38;2;6;220;157m [39m[38;2;7;223;153m [39m[38;2;8;225;149m [39m[38;2;10;228;145m [39m[38;2;12;230;140m [39m[38;2;13;233;136m [39m[38;2;15;235;132m [39m[38;2;17;237;128m [39m[38;2;20;239;123m [39m
[39m"
        );

    println!("Version {}", build::PKG_VERSION);

    let args = Args::parse();

    LOG.set_console(true)
        .set_level(LEVEL::Info)
        .set_format(Format::LevelFlag | Format::Time | Format::ShortFileName)
        .set_formatter("{level} {time} {file}\t> {message}\n")
        .set_attr_format(|attr_fmt| {
            attr_fmt.set_body_fmt(|lvl, body| {
                match lvl {
                    LEVEL::Trace => format!("{}{}{}", "\x1b[34m", body, "\x1b[0m"), //blue
                    LEVEL::Debug => format!("{}{}{}", "\x1b[36m", body, "\x1b[0m"), //cyan
                    LEVEL::Info => format!("{}{}{}", "\x1b[32m", body, "\x1b[0m"),  //green
                    LEVEL::Warn => format!("{}{}{}", "\x1b[33m", body, "\x1b[0m"),  //yellow
                    LEVEL::Error => format!("{}{}{}", "\x1b[31m", body, "\x1b[0m"), //red
                    LEVEL::Fatal => format!("{}{}{}", "\x1b[41m", body, "\x1b[0m"), //red-background
                    LEVEL::Off => "".to_string(),
                }
            });
            attr_fmt.set_level_fmt(|lvl| {
                match lvl {
                    LEVEL::Trace => "[T]",
                    LEVEL::Debug => "[D]",
                    LEVEL::Info => "[I]",
                    LEVEL::Warn => "[W]",
                    LEVEL::Error => "[E]",
                    LEVEL::Fatal => "[F]",
                    LEVEL::Off => "",
                }
                .to_string()
            })
        });

    let conf_path = if let Some(path) = args.config {
        path
    } else {
        println!("No Config File Specified. Looking for ./config.json...");
        "./config.json".to_string()
    };
    let conf_path = Path::new(&conf_path);

    let config_exists = fs::exists(&conf_path);
    match config_exists {
        Ok(exists) => {
            if !exists {
                println!("\x1b[31mConfig file {:?} is not found!", conf_path);
                println!("Use --config or -c to explicitly specify one.\x1b[0m");
                return Ok(());
            }
        }
        Err(e) => {
            println!("Failed to check if config file exists: {}", e);
            return Ok(());
        }
    }

    println!(
        "\x1b[34mUsing Config File '{}'.\x1b[0m",
        conf_path.canonicalize().unwrap().display()
    );

    let conf = fs::read_to_string(&conf_path);
    if let Err(e) = conf {
        println!("\x1b[31mFailed to read config file: {}\x1b[0m", e);
        return Ok(());
    }

    let conf = Config::parse(conf.ok().unwrap());
    if let Err(e) = conf {
        println!("\x1b[31mFailed to parse config file: {}\nMight be caused by incorrect json syntax or missing fields.\x1b[0m", e);
        return Ok(());
    }
    let conf = conf.ok().unwrap();

    println!();

    let log_conf = conf.log.clone().unwrap_or(LogConfig::default());
    LOG.set_cutmode_by_size(
        &log_conf.path.unwrap_or("notify_bot.log".to_string()),
        log_conf.size.unwrap_or(1 << 20),
        log_conf.backup.unwrap_or(1),
        log_conf.compress.unwrap_or(true),
    );

    info!("Config Loaded");

    let ip = conf.server.ip.clone();
    let port = conf.server.port;
    info!(format!("Server Listening at {}:{}", ip, port));

    let server = HttpServer::new(move || {
        let mut notifications = HashMap::new();
        for n in &conf.notifications {
            notifications.insert(n.id.clone(), n.clone());
            if n.groups.is_none() && n.users.is_none() {
                warn!(format!(
                    "Notification with ID [{}] has no group or person specified. It won't take any effect.",
                    n.id
                ));
            }
        }

        let runtime_conf = RuntimeConfig {
            onebot: conf.onebot.clone(),
            notifications,
        };

        let client = Client::builder()
            .timeout(Duration::from_secs(1))
            .build()
            .unwrap();

        App::new()
            .service(notify)
            .app_data(Data::new(runtime_conf))
            .app_data(Data::new(client))
    })
    .bind((ip, port))?
    .run();
    server.await
}
